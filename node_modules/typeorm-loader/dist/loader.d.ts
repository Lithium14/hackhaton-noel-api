import { Connection } from 'typeorm';
import { GraphQLResolveInfo } from 'graphql';
export declare type LoaderOptions = {
    /**
     * Time-to-live for cache.
     */
    ttl?: number;
};
/**
 * GraphQLDatabaseLoader is a caching loader that folds a batch of different database queries into a singular query.
 */
export declare class GraphQLDatabaseLoader {
    connection: Connection;
    options: LoaderOptions;
    private _queue;
    private _cache;
    private _immediate?;
    /**
     * Constructs an instance.
     * @param {Connection} connection The database connection.
     * @param {LoaderOptions} options (optional) Loader options.
     */
    constructor(connection: Connection, options?: LoaderOptions);
    /**
     * Load an entity from the database.
     * @param {typeof BaseEntity|string} entity The entity type to load.
     * @param where Query conditions.
     * @param {GraphQLResolveInfo} info (optional) GraphQL resolver information. If not provided, all fields are returned.
     * @returns {Promise<T>}
     */
    loadOne<T>(entity: Function | string, where: Partial<T>, info?: GraphQLResolveInfo): Promise<T | undefined>;
    /**
     * Load multiple entities that meet the same criteria .
     * @param {Function|string} entity The entity type to load.
     * @param {Partial<T>} where The conditions to match.
     * @param {GraphQLResolveInfo} info (optional)  GraphQL resolver information. If not provided, all fields are returned.
     * @returns {Promise<T?[]>}
     */
    loadMany<T>(entity: Function | string, where: Partial<T>, info?: GraphQLResolveInfo): Promise<(T | undefined)[]>;
    /**
     * Load multiple entities with different criteria.
     * @param {Function|string} entity The entity type to load.
     * @param {Partial<T>[]} where A series of conditions to match.
     * @param {GraphQLResolveInfo} info (optional)  GraphQL resolver information. If not provided, all fields are returned.
     * @returns {Promise<T?[]>}
     */
    batchLoadMany<T>(entity: Function | string, where: Partial<T>[], info?: GraphQLResolveInfo): Promise<(T | undefined)[]>;
    /**
     * Clears the loader cache.
     */
    clear(): void;
    /**
     * Process and clear the current queue.
     * @returns {Promise<void>}
     */
    protected processAll(): Promise<any>;
}
