"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto = require("crypto");
var select_1 = require("./select");
/**
 * GraphQLDatabaseLoader is a caching loader that folds a batch of different database queries into a singular query.
 */
var GraphQLDatabaseLoader = /** @class */ (function () {
    /**
     * Constructs an instance.
     * @param {Connection} connection The database connection.
     * @param {LoaderOptions} options (optional) Loader options.
     */
    function GraphQLDatabaseLoader(connection, options) {
        if (options === void 0) { options = {}; }
        this.connection = connection;
        this.options = options;
        this._queue = [];
        this._cache = new Map();
    }
    /**
     * Load an entity from the database.
     * @param {typeof BaseEntity|string} entity The entity type to load.
     * @param where Query conditions.
     * @param {GraphQLResolveInfo} info (optional) GraphQL resolver information. If not provided, all fields are returned.
     * @returns {Promise<T>}
     */
    GraphQLDatabaseLoader.prototype.loadOne = function (entity, where, info) {
        return __awaiter(this, void 0, void 0, function () {
            var hash, fields, key, promise;
            var _this = this;
            return __generator(this, function (_a) {
                hash = crypto.createHash('md5');
                fields = info ? select_1.graphqlFields(info) : null;
                key = hash.update(JSON.stringify([where, fields]))
                    .digest().toString('hex');
                // If the key matches a cache entry, return it.
                if (this._cache.has(key))
                    return [2 /*return*/, this._cache.get(key)];
                // If we have an immediate scheduled, cancel it.
                if (this._immediate) {
                    clearImmediate(this._immediate);
                }
                promise = new Promise(function (resolve, reject) {
                    // Push resolve/reject to the queue.
                    _this._queue.push({ many: false, batchIdx: _this._queue.length,
                        key: key, where: where, fields: fields, resolve: resolve, reject: reject, entity: entity });
                });
                // Set a new immediate.
                this._immediate = setImmediate(function () { return _this.processAll(); });
                // Cache the promise.
                this._cache.set(key, promise);
                // Return the promise.
                return [2 /*return*/, promise];
            });
        });
    };
    /**
     * Load multiple entities that meet the same criteria .
     * @param {Function|string} entity The entity type to load.
     * @param {Partial<T>} where The conditions to match.
     * @param {GraphQLResolveInfo} info (optional)  GraphQL resolver information. If not provided, all fields are returned.
     * @returns {Promise<T?[]>}
     */
    GraphQLDatabaseLoader.prototype.loadMany = function (entity, where, info) {
        return __awaiter(this, void 0, void 0, function () {
            var hash, fields, key, promise;
            var _this = this;
            return __generator(this, function (_a) {
                hash = crypto.createHash('md5');
                fields = info ? select_1.graphqlFields(info) : null;
                key = hash.update(JSON.stringify([where, fields])).digest().toString('hex');
                // If the key matches a cache entry, return it.
                if (this._cache.has(key))
                    return [2 /*return*/, this._cache.get(key)];
                // If we have an immediate scheduled, cancel it.
                if (this._immediate) {
                    clearImmediate(this._immediate);
                }
                promise = new Promise(function (resolve, reject) {
                    // Push resolve/reject to the queue.
                    _this._queue.push({ many: true, batchIdx: _this._queue.length,
                        key: key, where: where, fields: fields, resolve: resolve, reject: reject, entity: entity });
                });
                // Set a new immediate.
                this._immediate = setImmediate(function () { return _this.processAll(); });
                // Cache the promise.
                this._cache.set(key, promise);
                // Return the promise.
                return [2 /*return*/, promise];
            });
        });
    };
    /**
     * Load multiple entities with different criteria.
     * @param {Function|string} entity The entity type to load.
     * @param {Partial<T>[]} where A series of conditions to match.
     * @param {GraphQLResolveInfo} info (optional)  GraphQL resolver information. If not provided, all fields are returned.
     * @returns {Promise<T?[]>}
     */
    GraphQLDatabaseLoader.prototype.batchLoadMany = function (entity, where, info) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(where.map(function (w) { return _this.loadOne(entity, w, info); }))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Clears the loader cache.
     */
    GraphQLDatabaseLoader.prototype.clear = function () {
        this._cache.clear();
    };
    /**
     * Process and clear the current queue.
     * @returns {Promise<void>}
     */
    GraphQLDatabaseLoader.prototype.processAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queue, e_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queue = this._queue.splice(0, this._queue.length);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.connection.transaction(function (entityManager) { return __awaiter(_this, void 0, void 0, function () {
                                var _this = this;
                                return __generator(this, function (_a) {
                                    // const now = Date.now().toString(16);
                                    return [2 /*return*/, queue.map(function (q) {
                                            var name = typeof q.entity == 'string' ? q.entity : q.entity.name;
                                            var alias = "Q";
                                            var qb = entityManager.getRepository(name).createQueryBuilder(alias); //.getRepository(q.entity).createQueryBuilder();
                                            // qb = qb.from(name, alias);
                                            qb = select_1.select(name, q.fields, entityManager.connection, qb, alias);
                                            qb = qb.where(q.where);
                                            var promise = q.many ? qb.getMany() : qb.getOne();
                                            return promise.then(q.resolve, q.reject).finally(function () {
                                                _this._cache.delete(q.key);
                                            });
                                        })];
                                });
                            }); })];
                    case 2: 
                    // Create a new QueryBuilder instance.
                    return [2 /*return*/, _a.sent()];
                    case 3:
                        e_1 = _a.sent();
                        // An error occurred, reject the entire queue.
                        queue.forEach(function (q) {
                            q.reject(e_1);
                            _this._cache.delete(q.key);
                        });
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return GraphQLDatabaseLoader;
}());
exports.GraphQLDatabaseLoader = GraphQLDatabaseLoader;
//# sourceMappingURL=loader.js.map